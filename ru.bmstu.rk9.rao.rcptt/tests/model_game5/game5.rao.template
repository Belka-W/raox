enum Место_дырки {СПРАВА, СЛЕВА, СВЕРХУ, СНИЗУ, ДЫРКИ_РЯДОМ_НЕТ}

type Фишка {
	int номер;
	int место;
}

type Дырка {
	int место;
}

resource фишка1 = Фишка.create(1, 2);
resource фишка2 = Фишка.create(2, 3);
resource фишка3 = Фишка.create(3, 6);
resource фишка4 = Фишка.create(4, 4);
resource фишка5 = Фишка.create(5, 5);
resource дырка = Дырка.create(1);

rule Перемещение_фишки (Место_дырки куда_перемещать, int на_сколько_перемещать) {
	relevant _фишка =  Фишка.all.filter[где_дырка(место) == куда_перемещать].any();
	relevant _дырка = Дырка.all.any();

	def execute() {
		_фишка.место = _фишка.место + на_сколько_перемещать;
		_дырка.место = _дырка.место - на_сколько_перемещать;
	}
}

constant длина_поля = 3;

int Ряд(int место) {
	return (место - 1 ) / длина_поля + 1;
}

int Столбец(int место) {
	return (место - 1) % длина_поля + 1;
}

Место_дырки где_дырка(int место) {
	if (Столбец(место) == Столбец(дырка.место) && Ряд(место) == Ряд(дырка.место) + 1)
		return Место_дырки.СВЕРХУ;

	if (Столбец(место) == Столбец(дырка.место) && Ряд(место) == Ряд(дырка.место) - 1)
		return Место_дырки.СНИЗУ;

	if (Ряд(место) == Ряд(дырка.место) && Столбец(место) == Столбец(дырка.место) - 1)
		return Место_дырки.СПРАВА;

	if (Ряд(место) == Ряд(дырка.место) && Столбец(место) == Столбец(дырка.место) + 1)
		return Место_дырки.СЛЕВА;

	return Место_дырки.ДЫРКИ_РЯДОМ_НЕТ;
}

int Фишка_на_месте(int номер, int место) {
	if (номер == место)
		return 1
	else
		return 0
}

search Расстановка_фишек {
	edge перемещение_вправо = new Edge(Перемещение_фишки.create(Место_дырки.СПРАВА, 1), 1)
	edge перемещение_влево = new Edge(Перемещение_фишки.create(Место_дырки.СЛЕВА, -1), 1)
	edge перемещение_вверх = new Edge(Перемещение_фишки.create(Место_дырки.СВЕРХУ, -3), 1)
	edge перемещение_вниз = new Edge(Перемещение_фишки.create(Место_дырки.СНИЗУ, 3), 1)

	def init() {
		startCondition = [Фишка.all.exists[номер != место]]
		terminateCondition = [Фишка.all.forall[номер == место]]
		compareTops = true
		heuristic = [0.0]
	}
}
